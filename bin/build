#!/bin/sh
# blame: @dmilith
# 2018-11-09-0400-1541732403

. bin/loader


# Only for FreeBSD-compatible operating systems! Will just crash on other systems (if their "compiler tripple" has different value)
ONLY_FOR_ELF64="elf_x86_64_fbsd"

# Link product to library name:
PROJECT_LIBRARY_NAME="libkvmpro.so"

# Install products to-directory:
PROJECT_PREFIX="lib"
PROJECT_BUILD_DIR="obj"

# Use Sofin variables with compiler setup:
PROJECT_CXX_FLAGS="-std=c++14 -g -gdwarf-2 -fPIC -dynamiclib -flat_namespace -Wno-unused-command-line-argument"
PROJECT_LD_FLAGS="-m ${ONLY_FOR_ELF64} -fuse-ld=lld"
# ${HARDEN_LDFLAGS_PRODUCTION}
PROJECT_COMPILER="c++"

# Link project with all required system libraries:
PROJECT_LINKS_WITH="-lc -lc++ -lgcc_s -lkvm -lprocstat"

# unset for production (default):
unset ASAN_OPTIONS

# if leak-check file trigger exists - we're in memory-leak-check mode.
echo
if [ -f ".leak-check" ]; then
    permnote "Leak-Check and Debug mode enabled!"
    PROJECT_CXX_FLAGS="-O1 -g -gline-tables-only -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-recover=address -fsanitize-address-use-after-scope -fdebug-types-section -fdebug-macro -fdiagnostics-color -fstandalone-debug -fsanitize=address -fdelayed-template-parsing ${PROJECT_CXX_FLAGS}"
    PROJECT_LD_FLAGS="-O1 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-recover=address -fsanitize-address-use-after-scope -fdebug-types-section -fsanitize=address ${PROJECT_LD_FLAGS}"

else
    permnote "Build type: $(distn "Release")"
    PROJECT_CXX_FLAGS="-O2 ${PROJECT_CXX_FLAGS}"
fi


# Create Project build and library dirs:
mkdir -p \
    "${PROJECT_PREFIX}" \
    "${PROJECT_BUILD_DIR}"

permnote "Library: $(distn "${PROJECT_LIBRARY_NAME%.so}")"
permnote "Compiler flags: $(distn "${PROJECT_CXX_FLAGS}")"
permnote "Linker flags: $(distn "${PROJECT_LD_FLAGS}")"
echo

_state=""
for _pro_file in \
    "kvmpro_utils" \
    "kvmpro_pub" \
    ; do
        _state="${_state} ${_pro_file}"
        note "kvmpro: Building objects:$(distn "${_state}")…"
        "${PROJECT_COMPILER}" \
            -c \
            ${PROJECT_CXX_FLAGS} \
            -o "${PROJECT_BUILD_DIR}/${_pro_file}.o" \
            "src/${_pro_file}.cc"
done
echo

note "kvmpro: Link shared-object with system libraries: $(distn "${PROJECT_LINKS_WITH}")."
"${PROJECT_COMPILER}" \
    ${PROJECT_LD_FLAGS} \
    ${PROJECT_LINKS_WITH} \
    -o "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}" \
    ${PROJECT_BUILD_DIR}/*.o

# note "Link static-object with system libraries: $(distn "${PROJECT_LINKS_WITH}")."
# ar \
#     -cvq "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a" \
#     ${PROJECT_BUILD_DIR}/*.o
# ranlib \
#     "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a"

echo
# note "Strip all symbols…"
# strip -s "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}"

if [ -f "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}" ]; then
    permnote "Shared build successful: $(distn "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}")"
    # if [ -f "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a" ]; then
    #     permnote "Static build successful: $(distn "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a")"
    # else
    #     error "Failed to build static library!"
    # fi
else
    error "Failed to build shared library!"
fi

