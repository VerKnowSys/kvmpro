#!/bin/sh
# blame: @dmilith
# 2018-11-09-0400-1541732403

. bin/loader


# Only for FreeBSD-compatible operating systems! Will just crash on other systems (if their "compiler tripple" has different value)
ONLY_FOR_ELF64="elf_x86_64_fbsd"

# Link product to library name:
PROJECT_LIBRARY_NAME="libkvmpro.so"

# Install products to-directory:
PROJECT_PREFIX="lib"
PROJECT_BUILD_DIR="obj"

# Use Sofin variables with compiler setup:
PROJECT_CXX_FLAGS="-fPIC ${HARDEN_CFLAGS} ${HARDEN_CFLAGS_PRODUCTION} ${CMACROS} ${RETPOLINE_CFLAGS} ${HARDEN_CMACROS} ${HARDEN_OFLOW_CFLAGS} -Wno-unused-command-line-argument"
PROJECT_LD_FLAGS="-m ${ONLY_FOR_ELF64} -fuse-ld=lld -flto -shared -z retpolineplt ${HARDEN_LDFLAGS_PRODUCTION}"

# Link project with all required system libraries:
PROJECT_LINKS_WITH="-lc -lc++ -lgcc_s -lkvm -lprocstat"

# unset for production (default):
unset ASAN_OPTIONS

# if leak-check file trigger exists - we're in memory-leak-check mode.
echo
if [ -f ".leak-check" ]; then
    permnote "Leak-Check and Debug mode enabled!"
    PROJECT_CXX_FLAGS="${PROJECT_CXX_FLAGS} -glldb -gcodeview -O1 -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-recover=address -fsanitize-address-use-after-scope"
    PROJECT_LD_FLAGS="${PROJECT_LD_FLAGS} -O1 -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-recover=address -fsanitize-address-use-after-scope"

else
    permnote "Production mode enabled!"
    PROJECT_CXX_FLAGS="-g -O3 ${PROJECT_CXX_FLAGS}"
fi


# Create Project build and library dirs:
mkdir -p \
    "${PROJECT_PREFIX}" \
    "${PROJECT_BUILD_DIR}"

permnote "Library: $(distn "${PROJECT_LIBRARY_NAME%.so}")"
permnote "Compiler flags: $(distn "${PROJECT_CXX_FLAGS}")"
permnote "Linker flags: $(distn "${PROJECT_LD_FLAGS}")"
echo

_state=""
for _pro_file in \
    "utils" \
    "kvm" \
    "procstat" \
    ; do
        _state="${_state} ${_pro_file}"
        note "Building objects:$(distn "${_state}")…"
        c++ \
            ${PROJECT_CXX_FLAGS} \
            -o "${PROJECT_BUILD_DIR}/${_pro_file}.o" \
            -c \
            "src/${_pro_file}.cc"
done
echo

# Link to shared library:
note "Link shared-object with system libraries: $(distn "${PROJECT_LINKS_WITH}")."
ld \
    ${PROJECT_LD_FLAGS} \
    ${PROJECT_LINKS_WITH} \
    -o "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}" \
    ${PROJECT_BUILD_DIR}/*.o

note "Link static-object with system libraries: $(distn "${PROJECT_LINKS_WITH}")."
ar \
    -cvq "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a" \
    ${PROJECT_BUILD_DIR}/*.o
ranlib \
    "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a"

echo
note "Strip all symbols…"
strip -s "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}"

if [ -f "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}" ]; then
    permnote "Shared build successful: $(distn "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME}")"
    if [ -f "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a" ]; then
        permnote "Static build successful: $(distn "${PROJECT_PREFIX}/${PROJECT_LIBRARY_NAME%.so}.a")"
    else
        error "Failed to build static library!"
    fi
else
    error "Failed to build shared library!"
fi

